
html
  head
    meta(charset='utf-8')
    meta(name='viewport', content='width=device-width, initial-scale=1, maximum-scale=1')
    title This is the title of this talk

    link(rel='stylesheet', type='text/css', href='build/build.css')

  body

    article

      section
        h1 This is the title of this talk
        aside
          | This title is a compromise; I really wanted to call it

      section
        h1 The title of this talk is the title of this talk is the title of this talk is the title of this talk the title of this talk is the title of this talk is the title of this talk is the title of this talk is the title of this talk is the title of this talk is the title of this talk is the title of this talk is...
        aside
          | Which would've broken the Codebar website. So fair enough.

      section
        h2 In order to understand recursion, one must first understand recursion
        aside
          | This is a terrible joke, which usually gets made whenever anyone
          | talks about recursion.<br><br>
          | So let's get a better joke...

      section
        img(src="images/xkcdLogo.png" width="500")
        aside
          | ... from XKCD.<br><br>I love reading XKCD because it's either going to make
          | me laugh, or it's going to teach me something, or both.<br><br>First up:

      section
        img(src="images/tabletop_roleplaying.png" width="350")
        a(href="http://xkcd.com/244/")
          cite http://xkcd.com/244/
        aside
          | So here are some people playing Dungeons & Dragons - nothing weird
          | here, right? But one of them wants to start playing another game of
          | D&D inside this game of D&D. Which sounds like a bad idea.

      section
        img(src="images/ozymandias.png" width="450")
        a(href="http://xkcd.com/1557/")
          cite http://xkcd.com/1557/
        aside
          | And here someone is reading the first lines of _Ozymandias_ by
          | Percy Bysshe Shelly - hooray culture. And she's got into a bit of a
          | loop because the traveller keeps refering to the first line of the
          | poem that they're in. This poem may never end.<br><br>
          | So I hope that's enough humour - recursion is about self reference.
          | Now for some real fun!

      section
        h2 MATHS
        aside
          | We are going to need to talk about a little bit of maths, if only
          | because it's where programming gets its idea of recursion from.
          | Hopefully this will be painless

      section
        img(src="images/freak-out.gif" width="450")

      section
        h2 MATHS
        h3 (kinda)
        aside
          | We are going to need to talk about a little bit of maths, if only
          | because it's where programming gets its idea of recursion from.
          | Hopefully this will be painless

      section
        pre
          code.language-javascript.
            3 x (2 + (6 / 3))
        h3 Answer = ?
        aside
          | So here's a sum - we could call it an expression. How do we go about
          | working out the answer?

      section
        pre
          code.language-javascript.
            3 x (2 + (6 / 3))
        h4 Evaluate (i.e. work out) innermost
        pre
          code.language-javascript.
            6 / 3 = 2
        h4 So ... Answer =
        pre
          code.language-javascript.
            3 x (2 + 2)
        aside
          | We 'evaluate the innermost expression' - work out the brackets in
          | the middle - first.  So 6 / 3 is 2, and we're a bit closer.

      section
        pre
          code.language-javascript.
            3 x (2 + 2)
        h4 Evaluate innermost expression
        pre
          code.language-javascript.
            2 + 2 = 4
        h4 So ... Answer =
        pre
          code.language-javascript.
            3 x 4
        aside
          | Same again, but on the next innermost set of brackets

      section
        h3 Answer =
        pre
          code.language-javascript.
            3 x 4
        pre
          code.language-javascript.
            12
        aside
          | We start in the middle, work out what each bit evaluates to,
          | until we can evaluate the outermost bit.

      section
        h2 Recursion in Maths
        aside
          | So that's simple evaluation. But we're looking at recursion. And the
          | way it works in maths is pretty much the way it works in programming.
          | So let's look at the maths way first.

      section
        h2 Factorial (!)
        pre
          code.language-javascript.
            3! = 1 x 2 x 3 = 6
        pre
          code.language-javascript.
            5! = 1 x 2 x 3 x 4 x 5 = 120
        pre
          code.language-javascript.
            0! = 1
        aside
          | Factorial is a good place to start from. The factorial of a number is
          | all of the numbers from one up to the number multiplied together.<br><br>
          | Mathematicians use recursions to define this relationship with what's
          | called a recursive definition.

      section
        h3 Recursive definition of Factorial:<br><br>
          img(src="images/factorial.svg" width="500")
        a(href="https://en.wikipedia.org/wiki/Factorial")
          cite https://en.wikipedia.org/wiki/Factorial
        aside
          | OK, now this sort of thing scares the bejeezus out of me, so let's all
          | brace ourselves and read through it.
          | First `n` is a variable. So `n!` is `factorial of n`
          | The big curly brace is just a mathsy way of saying `um... depends`
          | So it's `1` `if n = 0`
          | and `if n > 0`
          | it's `(factorial of n - 1) times n`<br><br>
          | So the cool bit is... we can translate this straight over to JavaScript
          | and Ruby.
      section
        pre
          code.language-javascript.
            function factorial(n) {
              if (n === 0) return 1;
              if (n > 0) return factorial(n - 1) * n;
            }

      section
        pre
          code.language-ruby.
            def factorial(n)
              return 1 if n == 0
              factorial(n - 1) * n if n > 0
            end

      section
        pre
          code.language-javascript.
            function factorial(n) {
              if (n === 0) return 1;
              if (n > 0) return factorial(n - 1) * n;
            }
        aside
          | But I prefer JavaScript. So deal with it Rubyists ;)

      section
        pre
          code.language-javascript.
            factorial(3)
        aside
          | The best way to see what happens when we run this is to walk through
          | the code. So lets work out 3!

      section
        pre
          code.language-javascript.
            function factorial(n) {
              if (n === 0) return 1;
              if (n > 0) return factorial(n - 1) * n;
            }
        pre
          code.language-javascript.
            if (3 === 0) ... // nope
        pre
          code.language-javascript.
            if (3 > 0)  ... // yep
        pre
          code.language-javascript.
            return factorial(3 - 1) * 3;
        aside
          | So let's kick this off with n set to (bound to) the number 3
          | is 3 equal to 0? Nope<br>
          | is 3 greater than 0? Yep!<br>
          | so we return factorial(3 - 1) * 3

      section
        pre
          code.language-javascript.
            factorial(3)
        pre
          code.language-javascript.
            factorial(2) * 3;
        aside
          | So now we know that factorial(3) is equivalent to factorial(2) * 3<br>
          | So what's factorial(2)

      section
        pre
          code.language-javascript.
            factorial(2)
        pre
          code.language-javascript.
            if (2 === 0) ... // nope
        pre
          code.language-javascript.
            if (2 > 0)  ... // yep
        pre
          code.language-javascript.
            return factorial(2 - 1) * 2;
        aside
          | Same again

      section
        pre
          code.language-javascript.
            factorial(3)
        pre
          code.language-javascript.
            factorial(2) * 3;
        pre
          code.language-javascript.
            (factorial(1) * 2) * 3;
        aside
          | So we know what factorial(2) is now ... but what's factorial(1)

      section
        pre
          code.language-javascript.
            factorial(1)
        pre
          code.language-javascript.
            if (1 === 0) ... // nope
        pre
          code.language-javascript.
            if (1 > 0)  ... // yep
        pre
          code.language-javascript.
            return factorial(1 - 1) * 1;

      section
        pre
          code.language-javascript.
            factorial(3)
        pre
          code.language-javascript.
            factorial(2) * 3;
        pre
          code.language-javascript.
            (factorial(1) * 2) * 3;
        pre
          code.language-javascript.
            ((factorial(0) * 1) * 2) * 3;

      section
        pre
          code.language-javascript.
            factorial(0)
        pre
          code.language-javascript.
            if (0 === 0) ... // yep!
        pre
          code.language-javascript.
            return 1

      section
        pre
          code.language-javascript.
            factorial(3)
        pre
          code.language-javascript.
            factorial(2) * 3;
        pre
          code.language-javascript.
            (factorial(1) * 2) * 3;
        pre
          code.language-javascript.
            ((factorial(0) * 1) * 2) * 3;
        pre
          code.language-javascript.
            ((1 * 1) * 2) * 3;

      section
        pre
          code.language-javascript.
            ((1 * 1) * 2) * 3
        pre
          code.language-javascript.
            (1 * 2) * 3
        pre
          code.language-javascript.
            2 * 3
        pre
          code.language-javascript.
            6

      section
        ul
          li
            h4 This
            pre
              code.language-javascript.
                ((1 * 1) * 2) * 3
          li
            h4 is just like this
              pre
                code.language-javascript.
                  1 x (2 + (6 / 3))
          li
            h3 So what's the difference?

      section
        ul
          li
            h4 This
            pre
              code.language-javascript.
                1 x (2 + (6 / 3))
            h4 Has an innermost expression
          li
            h4 But this
            pre
              code.language-javascript.
                factorial(3)
            h4 Needs to work out what its innermost expression is
        aside
          | Which it does by diving down a recursive hole

      section
        img(src="images/recursion.gif" width="500")
        aside
          | This is the difference
          | With recursion you build the expression out of multiple copies of
          | the function. And you need to know when to stop.

      section
        pre
          code.language-javascript.
            function infinity(n) {
              return infinity(n);
            }
        aside
          | This is the gif, as javascript. This is what we need to avoid.
          | Once we've gone far enough 'down', we always need a way to get back 'up'
          | So how do we make sure we can always get back out?

      section
        h1 Rule 1:
        h2 Always have a way to stop
        h2 (a 'base' case or cases)

      section
        pre
          code.language-javascript.
            function factorial(n) {
              if (n === 0) return 1; // <-- STOP HERE

              if (n > 0) return factorial(n - 1) * n;
            }
        aside
          | The base case of factorial is when n == 0; at this point we stop
          | recurring (recursing?)

      section
        pre
          code.language-javascript.
            function fibonacci (n) {
              if (n === 0) return 0;  // <-- STOP HERE
              if (n === 1) return 1;  // <-- OR HERE

              return fibonacci(n - 2) + fibonacci(n - 1);
            }
        aside
          | You can have multiple base cases, as with this example of a function
          | that generates the fibonacci numbers

      section
        h1 Rule 2:
        h2 Always get closer to stopping

      section
        pre
          code.language-javascript.
            function factorial(n) {
              if (n === 0) return 1;

              if (n > 0) return factorial(n - 1) * n;
                  // ONE STEP CLOSER      ^^^
            }
        aside
          | When we recur - when we call factorial again - we _must_ get closer
          | the base case.

      section
        pre
          code.language-javascript.
            function fibonacci (n) {
              if (n === 0) return 0;
              if (n === 1) return 1;

              return fibonacci(n - 2) + fibonacci(n - 1);
              //               ^^^^^GETTING THERE ^^^^^
            }
        aside
          | Here we're getting closer with the fibonacci function - we know that
          | eventually n will be 0 or 1.

      section
        img(src="images/recursion2.gif" width="400")
        aside
          | This all over again

      section
        h1 Why?

      section
        img(src="images/functional.png" width="350")
        a(href="http://xkcd.com/1207/")
          cite http://xkcd.com/1270/

      section
        h1 No, seriously - why?

      section
        pre
          code.language-javascript.
            function factorial(n) {
              var result = 1;

              for (var i = n; i > 0; i--) {
                result = result * i;
              }

              return result;
            }

        aside
          | So this is factorial written without recursion - as a loop
          | Now I can tell you two things about this

      section
        ul
          li
            h2 1. It's faster
          li
            h2 2. It's more memory efficient

        aside
          | So this is factorial written without recursion - as a loop
          | Now I can tell you two things about this

      section
        h1 But is it easier to read?

        aside
          | So this is factorial written without recursion - as a loop
          | Now I can tell you two things about this

      section
        pre
          code.language-javascript.
            function factorial(n) {
              if (n === 0) return 1;

              if (n > 0) return factorial(n - 1) * n;
            }

      section
        pre
          code.language-javascript.
            function factorial(n) {
              var result = 1;

              for (var i = n; i > 0; i--) {
                result = result * i;
              }

              return result;
            }

      section
        h2 Always pick the one that expresses the idea the best

      section
        h2 (I think it's the recursive one)

      section
        h2 Further reading
        img(src="images/little-schemer.jpg" width="300")
        a(href="https://mitpress.mit.edu/books/little-schemer")
          h3 The Little Schemer

      section
        a(href="https://github.com/gypsydave5/recursion-presentation/blob/master/examples/arithmetic.js")
          h3 Arithmetic as recursion
        a(href="https://github.com/gypsydave5/recursion-presentation/blob/master/examples/lists.js")
          h3 Data structures as recursion

      section
        h1 Ta!

    script(src='build/build.js')